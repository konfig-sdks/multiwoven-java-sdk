/*
 * MultiWoven API
 * Open-source Reverse ETL that makes data segmentation, sync and activation both easy and fully secure.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.SyncRunsListBySyncIdResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SyncRunsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SyncRunsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public SyncRunsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call listBySyncIdCall(Integer syncId, String status, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/syncs/{sync_id}/sync_runs"
            .replace("{" + "sync_id" + "}", localVarApiClient.escapeString(syncId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listBySyncIdValidateBeforeCall(Integer syncId, String status, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'syncId' is set
        if (syncId == null) {
            throw new ApiException("Missing the required parameter 'syncId' when calling listBySyncId(Async)");
        }

        return listBySyncIdCall(syncId, status, page, _callback);

    }


    private ApiResponse<SyncRunsListBySyncIdResponse> listBySyncIdWithHttpInfo(Integer syncId, String status, Integer page) throws ApiException {
        okhttp3.Call localVarCall = listBySyncIdValidateBeforeCall(syncId, status, page, null);
        Type localVarReturnType = new TypeToken<SyncRunsListBySyncIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listBySyncIdAsync(Integer syncId, String status, Integer page, final ApiCallback<SyncRunsListBySyncIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listBySyncIdValidateBeforeCall(syncId, status, page, _callback);
        Type localVarReturnType = new TypeToken<SyncRunsListBySyncIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListBySyncIdRequestBuilder {
        private final Integer syncId;
        private String status;
        private Integer page;

        private ListBySyncIdRequestBuilder(Integer syncId) {
            this.syncId = syncId;
        }

        /**
         * Set status
         * @param status Optional status to filter the sync runs by. (optional)
         * @return ListBySyncIdRequestBuilder
         */
        public ListBySyncIdRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set page
         * @param page Page number for pagination. (optional)
         * @return ListBySyncIdRequestBuilder
         */
        public ListBySyncIdRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Build call for listBySyncId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A JSON array of sync runs </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listBySyncIdCall(syncId, status, page, _callback);
        }


        /**
         * Execute listBySyncId request
         * @return SyncRunsListBySyncIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A JSON array of sync runs </td><td>  -  </td></tr>
         </table>
         */
        public SyncRunsListBySyncIdResponse execute() throws ApiException {
            ApiResponse<SyncRunsListBySyncIdResponse> localVarResp = listBySyncIdWithHttpInfo(syncId, status, page);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listBySyncId request with HTTP info returned
         * @return ApiResponse&lt;SyncRunsListBySyncIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A JSON array of sync runs </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SyncRunsListBySyncIdResponse> executeWithHttpInfo() throws ApiException {
            return listBySyncIdWithHttpInfo(syncId, status, page);
        }

        /**
         * Execute listBySyncId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A JSON array of sync runs </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SyncRunsListBySyncIdResponse> _callback) throws ApiException {
            return listBySyncIdAsync(syncId, status, page, _callback);
        }
    }

    /**
     * List sync runs for a specific sync
     * Retrieves a list of sync runs for a specific sync, optionally filtered by status.
     * @param syncId The ID of the sync to list runs for. (required)
     * @return ListBySyncIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of sync runs </td><td>  -  </td></tr>
     </table>
     */
    public ListBySyncIdRequestBuilder listBySyncId(Integer syncId) throws IllegalArgumentException {
        if (syncId == null) throw new IllegalArgumentException("\"syncId\" is required but got null");
        return new ListBySyncIdRequestBuilder(syncId);
    }
}
