/*
 * MultiWoven API
 * Open-source Reverse ETL that makes data segmentation, sync and activation both easy and fully secure.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.SyncsCreateNewSyncOperationRequest;
import com.konfigthis.client.model.SyncsCreateNewSyncOperationRequestSync;
import com.konfigthis.client.model.SyncsCreateNewSyncOperationResponse;
import com.konfigthis.client.model.SyncsGetReportDataResponse;
import com.konfigthis.client.model.SyncsListOperationsResponse;
import com.konfigthis.client.model.SyncsShowDetailsResponse;
import com.konfigthis.client.model.SyncsUpdateSpecificSyncRequest;
import com.konfigthis.client.model.SyncsUpdateSpecificSyncRequestSync;
import com.konfigthis.client.model.SyncsUpdateSpecificSyncResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SyncsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SyncsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public SyncsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewSyncOperationCall(SyncsCreateNewSyncOperationRequest syncsCreateNewSyncOperationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = syncsCreateNewSyncOperationRequest;

        // create path and map variables
        String localVarPath = "/api/v1/syncs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewSyncOperationValidateBeforeCall(SyncsCreateNewSyncOperationRequest syncsCreateNewSyncOperationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'syncsCreateNewSyncOperationRequest' is set
        if (syncsCreateNewSyncOperationRequest == null) {
            throw new ApiException("Missing the required parameter 'syncsCreateNewSyncOperationRequest' when calling createNewSyncOperation(Async)");
        }

        return createNewSyncOperationCall(syncsCreateNewSyncOperationRequest, _callback);

    }


    private ApiResponse<SyncsCreateNewSyncOperationResponse> createNewSyncOperationWithHttpInfo(SyncsCreateNewSyncOperationRequest syncsCreateNewSyncOperationRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewSyncOperationValidateBeforeCall(syncsCreateNewSyncOperationRequest, null);
        Type localVarReturnType = new TypeToken<SyncsCreateNewSyncOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewSyncOperationAsync(SyncsCreateNewSyncOperationRequest syncsCreateNewSyncOperationRequest, final ApiCallback<SyncsCreateNewSyncOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewSyncOperationValidateBeforeCall(syncsCreateNewSyncOperationRequest, _callback);
        Type localVarReturnType = new TypeToken<SyncsCreateNewSyncOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewSyncOperationRequestBuilder {
        private SyncsCreateNewSyncOperationRequestSync sync;

        private CreateNewSyncOperationRequestBuilder() {
        }

        /**
         * Set sync
         * @param sync  (optional)
         * @return CreateNewSyncOperationRequestBuilder
         */
        public CreateNewSyncOperationRequestBuilder sync(SyncsCreateNewSyncOperationRequestSync sync) {
            this.sync = sync;
            return this;
        }
        
        /**
         * Build call for createNewSyncOperation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Sync operation created successfully </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SyncsCreateNewSyncOperationRequest syncsCreateNewSyncOperationRequest = buildBodyParams();
            return createNewSyncOperationCall(syncsCreateNewSyncOperationRequest, _callback);
        }

        private SyncsCreateNewSyncOperationRequest buildBodyParams() {
            SyncsCreateNewSyncOperationRequest syncsCreateNewSyncOperationRequest = new SyncsCreateNewSyncOperationRequest();
            syncsCreateNewSyncOperationRequest.sync(this.sync);
            return syncsCreateNewSyncOperationRequest;
        }

        /**
         * Execute createNewSyncOperation request
         * @return SyncsCreateNewSyncOperationResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Sync operation created successfully </td><td>  -  </td></tr>
         </table>
         */
        public SyncsCreateNewSyncOperationResponse execute() throws ApiException {
            SyncsCreateNewSyncOperationRequest syncsCreateNewSyncOperationRequest = buildBodyParams();
            ApiResponse<SyncsCreateNewSyncOperationResponse> localVarResp = createNewSyncOperationWithHttpInfo(syncsCreateNewSyncOperationRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewSyncOperation request with HTTP info returned
         * @return ApiResponse&lt;SyncsCreateNewSyncOperationResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Sync operation created successfully </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SyncsCreateNewSyncOperationResponse> executeWithHttpInfo() throws ApiException {
            SyncsCreateNewSyncOperationRequest syncsCreateNewSyncOperationRequest = buildBodyParams();
            return createNewSyncOperationWithHttpInfo(syncsCreateNewSyncOperationRequest);
        }

        /**
         * Execute createNewSyncOperation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Sync operation created successfully </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SyncsCreateNewSyncOperationResponse> _callback) throws ApiException {
            SyncsCreateNewSyncOperationRequest syncsCreateNewSyncOperationRequest = buildBodyParams();
            return createNewSyncOperationAsync(syncsCreateNewSyncOperationRequest, _callback);
        }
    }

    /**
     * Create a new sync operation
     * 
     * @param syncsCreateNewSyncOperationRequest  (required)
     * @return CreateNewSyncOperationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sync operation created successfully </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewSyncOperationRequestBuilder createNewSyncOperation() throws IllegalArgumentException {
        return new CreateNewSyncOperationRequestBuilder();
    }
    private okhttp3.Call deleteSyncOperationCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/syncs/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSyncOperationValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteSyncOperation(Async)");
        }

        return deleteSyncOperationCall(id, _callback);

    }


    private ApiResponse<Void> deleteSyncOperationWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteSyncOperationValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteSyncOperationAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSyncOperationValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteSyncOperationRequestBuilder {
        private final String id;

        private DeleteSyncOperationRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for deleteSyncOperation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content, indicating the sync operation was successfully deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteSyncOperationCall(id, _callback);
        }


        /**
         * Execute deleteSyncOperation request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content, indicating the sync operation was successfully deleted </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteSyncOperationWithHttpInfo(id);
        }

        /**
         * Execute deleteSyncOperation request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content, indicating the sync operation was successfully deleted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteSyncOperationWithHttpInfo(id);
        }

        /**
         * Execute deleteSyncOperation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content, indicating the sync operation was successfully deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteSyncOperationAsync(id, _callback);
        }
    }

    /**
     * Delete a specific sync operation
     * 
     * @param id The ID of the sync operation to delete (required)
     * @return DeleteSyncOperationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content, indicating the sync operation was successfully deleted </td><td>  -  </td></tr>
     </table>
     */
    public DeleteSyncOperationRequestBuilder deleteSyncOperation(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new DeleteSyncOperationRequestBuilder(id);
    }
    private okhttp3.Call getReportDataCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/syncs/configurations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReportDataValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getReportDataCall(_callback);

    }


    private ApiResponse<SyncsGetReportDataResponse> getReportDataWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getReportDataValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SyncsGetReportDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getReportDataAsync(final ApiCallback<SyncsGetReportDataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReportDataValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SyncsGetReportDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetReportDataRequestBuilder {

        private GetReportDataRequestBuilder() {
        }

        /**
         * Build call for getReportData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved report data. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getReportDataCall(_callback);
        }


        /**
         * Execute getReportData request
         * @return SyncsGetReportDataResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved report data. </td><td>  -  </td></tr>
         </table>
         */
        public SyncsGetReportDataResponse execute() throws ApiException {
            ApiResponse<SyncsGetReportDataResponse> localVarResp = getReportDataWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getReportData request with HTTP info returned
         * @return ApiResponse&lt;SyncsGetReportDataResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved report data. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SyncsGetReportDataResponse> executeWithHttpInfo() throws ApiException {
            return getReportDataWithHttpInfo();
        }

        /**
         * Execute getReportData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved report data. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SyncsGetReportDataResponse> _callback) throws ApiException {
            return getReportDataAsync(_callback);
        }
    }

    /**
     * Get report data based on given type
     * 
     * @return GetReportDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved report data. </td><td>  -  </td></tr>
     </table>
     */
    public GetReportDataRequestBuilder getReportData() throws IllegalArgumentException {
        return new GetReportDataRequestBuilder();
    }
    private okhttp3.Call listOperationsCall(Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/syncs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page[number]", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page[size]", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listOperationsValidateBeforeCall(Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        return listOperationsCall(pageNumber, pageSize, _callback);

    }


    private ApiResponse<SyncsListOperationsResponse> listOperationsWithHttpInfo(Integer pageNumber, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = listOperationsValidateBeforeCall(pageNumber, pageSize, null);
        Type localVarReturnType = new TypeToken<SyncsListOperationsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listOperationsAsync(Integer pageNumber, Integer pageSize, final ApiCallback<SyncsListOperationsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listOperationsValidateBeforeCall(pageNumber, pageSize, _callback);
        Type localVarReturnType = new TypeToken<SyncsListOperationsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListOperationsRequestBuilder {
        private Integer pageNumber;
        private Integer pageSize;

        private ListOperationsRequestBuilder() {
        }

        /**
         * Set pageNumber
         * @param pageNumber Page number for pagination (optional)
         * @return ListOperationsRequestBuilder
         */
        public ListOperationsRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Number of items per page for pagination (optional)
         * @return ListOperationsRequestBuilder
         */
        public ListOperationsRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Build call for listOperations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of sync operations </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listOperationsCall(pageNumber, pageSize, _callback);
        }


        /**
         * Execute listOperations request
         * @return SyncsListOperationsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of sync operations </td><td>  -  </td></tr>
         </table>
         */
        public SyncsListOperationsResponse execute() throws ApiException {
            ApiResponse<SyncsListOperationsResponse> localVarResp = listOperationsWithHttpInfo(pageNumber, pageSize);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listOperations request with HTTP info returned
         * @return ApiResponse&lt;SyncsListOperationsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of sync operations </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SyncsListOperationsResponse> executeWithHttpInfo() throws ApiException {
            return listOperationsWithHttpInfo(pageNumber, pageSize);
        }

        /**
         * Execute listOperations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of sync operations </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SyncsListOperationsResponse> _callback) throws ApiException {
            return listOperationsAsync(pageNumber, pageSize, _callback);
        }
    }

    /**
     * List all sync operations
     * 
     * @return ListOperationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of sync operations </td><td>  -  </td></tr>
     </table>
     */
    public ListOperationsRequestBuilder listOperations() throws IllegalArgumentException {
        return new ListOperationsRequestBuilder();
    }
    private okhttp3.Call showDetailsCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/syncs/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showDetailsValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling showDetails(Async)");
        }

        return showDetailsCall(id, _callback);

    }


    private ApiResponse<SyncsShowDetailsResponse> showDetailsWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = showDetailsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SyncsShowDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call showDetailsAsync(String id, final ApiCallback<SyncsShowDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = showDetailsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SyncsShowDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ShowDetailsRequestBuilder {
        private final String id;

        private ShowDetailsRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for showDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Sync details retrieved successfully </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return showDetailsCall(id, _callback);
        }


        /**
         * Execute showDetails request
         * @return SyncsShowDetailsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Sync details retrieved successfully </td><td>  -  </td></tr>
         </table>
         */
        public SyncsShowDetailsResponse execute() throws ApiException {
            ApiResponse<SyncsShowDetailsResponse> localVarResp = showDetailsWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute showDetails request with HTTP info returned
         * @return ApiResponse&lt;SyncsShowDetailsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Sync details retrieved successfully </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SyncsShowDetailsResponse> executeWithHttpInfo() throws ApiException {
            return showDetailsWithHttpInfo(id);
        }

        /**
         * Execute showDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Sync details retrieved successfully </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SyncsShowDetailsResponse> _callback) throws ApiException {
            return showDetailsAsync(id, _callback);
        }
    }

    /**
     * Show details of a specific sync operation
     * 
     * @param id  (required)
     * @return ShowDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sync details retrieved successfully </td><td>  -  </td></tr>
     </table>
     */
    public ShowDetailsRequestBuilder showDetails(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new ShowDetailsRequestBuilder(id);
    }
    private okhttp3.Call updateSpecificSyncCall(String id, SyncsUpdateSpecificSyncRequest syncsUpdateSpecificSyncRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = syncsUpdateSpecificSyncRequest;

        // create path and map variables
        String localVarPath = "/api/v1/syncs/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSpecificSyncValidateBeforeCall(String id, SyncsUpdateSpecificSyncRequest syncsUpdateSpecificSyncRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateSpecificSync(Async)");
        }

        // verify the required parameter 'syncsUpdateSpecificSyncRequest' is set
        if (syncsUpdateSpecificSyncRequest == null) {
            throw new ApiException("Missing the required parameter 'syncsUpdateSpecificSyncRequest' when calling updateSpecificSync(Async)");
        }

        return updateSpecificSyncCall(id, syncsUpdateSpecificSyncRequest, _callback);

    }


    private ApiResponse<SyncsUpdateSpecificSyncResponse> updateSpecificSyncWithHttpInfo(String id, SyncsUpdateSpecificSyncRequest syncsUpdateSpecificSyncRequest) throws ApiException {
        okhttp3.Call localVarCall = updateSpecificSyncValidateBeforeCall(id, syncsUpdateSpecificSyncRequest, null);
        Type localVarReturnType = new TypeToken<SyncsUpdateSpecificSyncResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateSpecificSyncAsync(String id, SyncsUpdateSpecificSyncRequest syncsUpdateSpecificSyncRequest, final ApiCallback<SyncsUpdateSpecificSyncResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSpecificSyncValidateBeforeCall(id, syncsUpdateSpecificSyncRequest, _callback);
        Type localVarReturnType = new TypeToken<SyncsUpdateSpecificSyncResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateSpecificSyncRequestBuilder {
        private final String id;
        private SyncsUpdateSpecificSyncRequestSync sync;

        private UpdateSpecificSyncRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set sync
         * @param sync  (optional)
         * @return UpdateSpecificSyncRequestBuilder
         */
        public UpdateSpecificSyncRequestBuilder sync(SyncsUpdateSpecificSyncRequestSync sync) {
            this.sync = sync;
            return this;
        }
        
        /**
         * Build call for updateSpecificSync
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Sync operation updated successfully </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SyncsUpdateSpecificSyncRequest syncsUpdateSpecificSyncRequest = buildBodyParams();
            return updateSpecificSyncCall(id, syncsUpdateSpecificSyncRequest, _callback);
        }

        private SyncsUpdateSpecificSyncRequest buildBodyParams() {
            SyncsUpdateSpecificSyncRequest syncsUpdateSpecificSyncRequest = new SyncsUpdateSpecificSyncRequest();
            syncsUpdateSpecificSyncRequest.sync(this.sync);
            return syncsUpdateSpecificSyncRequest;
        }

        /**
         * Execute updateSpecificSync request
         * @return SyncsUpdateSpecificSyncResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Sync operation updated successfully </td><td>  -  </td></tr>
         </table>
         */
        public SyncsUpdateSpecificSyncResponse execute() throws ApiException {
            SyncsUpdateSpecificSyncRequest syncsUpdateSpecificSyncRequest = buildBodyParams();
            ApiResponse<SyncsUpdateSpecificSyncResponse> localVarResp = updateSpecificSyncWithHttpInfo(id, syncsUpdateSpecificSyncRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateSpecificSync request with HTTP info returned
         * @return ApiResponse&lt;SyncsUpdateSpecificSyncResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Sync operation updated successfully </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SyncsUpdateSpecificSyncResponse> executeWithHttpInfo() throws ApiException {
            SyncsUpdateSpecificSyncRequest syncsUpdateSpecificSyncRequest = buildBodyParams();
            return updateSpecificSyncWithHttpInfo(id, syncsUpdateSpecificSyncRequest);
        }

        /**
         * Execute updateSpecificSync request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Sync operation updated successfully </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SyncsUpdateSpecificSyncResponse> _callback) throws ApiException {
            SyncsUpdateSpecificSyncRequest syncsUpdateSpecificSyncRequest = buildBodyParams();
            return updateSpecificSyncAsync(id, syncsUpdateSpecificSyncRequest, _callback);
        }
    }

    /**
     * Update a specific sync operation
     * 
     * @param id  (required)
     * @param syncsUpdateSpecificSyncRequest  (required)
     * @return UpdateSpecificSyncRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sync operation updated successfully </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSpecificSyncRequestBuilder updateSpecificSync(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateSpecificSyncRequestBuilder(id);
    }
}
