/*
 * MultiWoven API
 * Open-source Reverse ETL that makes data segmentation, sync and activation both easy and fully secure.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ConnectorsCreateNewConnectorRequest;
import com.konfigthis.client.model.ConnectorsCreateNewConnectorRequestConnector;
import com.konfigthis.client.model.ConnectorsCreateNewConnectorResponse;
import com.konfigthis.client.model.ConnectorsDiscoverCatalogInfoResponse;
import com.konfigthis.client.model.ConnectorsGetByIdResponse;
import com.konfigthis.client.model.ConnectorsListAllResponse;
import com.konfigthis.client.model.ConnectorsQuerySourceRequest;
import com.konfigthis.client.model.ConnectorsUpdateByIdRequest;
import com.konfigthis.client.model.ConnectorsUpdateByIdRequestConnector;
import com.konfigthis.client.model.ConnectorsUpdateByIdResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ConnectorsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ConnectorsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ConnectorsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewConnectorCall(ConnectorsCreateNewConnectorRequest connectorsCreateNewConnectorRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectorsCreateNewConnectorRequest;

        // create path and map variables
        String localVarPath = "/api/v1/connectors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewConnectorValidateBeforeCall(ConnectorsCreateNewConnectorRequest connectorsCreateNewConnectorRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectorsCreateNewConnectorRequest' is set
        if (connectorsCreateNewConnectorRequest == null) {
            throw new ApiException("Missing the required parameter 'connectorsCreateNewConnectorRequest' when calling createNewConnector(Async)");
        }

        return createNewConnectorCall(connectorsCreateNewConnectorRequest, _callback);

    }


    private ApiResponse<ConnectorsCreateNewConnectorResponse> createNewConnectorWithHttpInfo(ConnectorsCreateNewConnectorRequest connectorsCreateNewConnectorRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewConnectorValidateBeforeCall(connectorsCreateNewConnectorRequest, null);
        Type localVarReturnType = new TypeToken<ConnectorsCreateNewConnectorResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewConnectorAsync(ConnectorsCreateNewConnectorRequest connectorsCreateNewConnectorRequest, final ApiCallback<ConnectorsCreateNewConnectorResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewConnectorValidateBeforeCall(connectorsCreateNewConnectorRequest, _callback);
        Type localVarReturnType = new TypeToken<ConnectorsCreateNewConnectorResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewConnectorRequestBuilder {
        private ConnectorsCreateNewConnectorRequestConnector connector;

        private CreateNewConnectorRequestBuilder() {
        }

        /**
         * Set connector
         * @param connector  (optional)
         * @return CreateNewConnectorRequestBuilder
         */
        public CreateNewConnectorRequestBuilder connector(ConnectorsCreateNewConnectorRequestConnector connector) {
            this.connector = connector;
            return this;
        }
        
        /**
         * Build call for createNewConnector
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Connector created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ConnectorsCreateNewConnectorRequest connectorsCreateNewConnectorRequest = buildBodyParams();
            return createNewConnectorCall(connectorsCreateNewConnectorRequest, _callback);
        }

        private ConnectorsCreateNewConnectorRequest buildBodyParams() {
            ConnectorsCreateNewConnectorRequest connectorsCreateNewConnectorRequest = new ConnectorsCreateNewConnectorRequest();
            connectorsCreateNewConnectorRequest.connector(this.connector);
            return connectorsCreateNewConnectorRequest;
        }

        /**
         * Execute createNewConnector request
         * @return ConnectorsCreateNewConnectorResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Connector created </td><td>  -  </td></tr>
         </table>
         */
        public ConnectorsCreateNewConnectorResponse execute() throws ApiException {
            ConnectorsCreateNewConnectorRequest connectorsCreateNewConnectorRequest = buildBodyParams();
            ApiResponse<ConnectorsCreateNewConnectorResponse> localVarResp = createNewConnectorWithHttpInfo(connectorsCreateNewConnectorRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewConnector request with HTTP info returned
         * @return ApiResponse&lt;ConnectorsCreateNewConnectorResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Connector created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConnectorsCreateNewConnectorResponse> executeWithHttpInfo() throws ApiException {
            ConnectorsCreateNewConnectorRequest connectorsCreateNewConnectorRequest = buildBodyParams();
            return createNewConnectorWithHttpInfo(connectorsCreateNewConnectorRequest);
        }

        /**
         * Execute createNewConnector request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Connector created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConnectorsCreateNewConnectorResponse> _callback) throws ApiException {
            ConnectorsCreateNewConnectorRequest connectorsCreateNewConnectorRequest = buildBodyParams();
            return createNewConnectorAsync(connectorsCreateNewConnectorRequest, _callback);
        }
    }

    /**
     * Creates a connector
     * 
     * @param connectorsCreateNewConnectorRequest  (required)
     * @return CreateNewConnectorRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Connector created </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewConnectorRequestBuilder createNewConnector() throws IllegalArgumentException {
        return new CreateNewConnectorRequestBuilder();
    }
    private okhttp3.Call deleteByIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/connectors/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteById(Async)");
        }

        return deleteByIdCall(id, _callback);

    }


    private ApiResponse<Void> deleteByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteByIdValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteByIdAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteByIdValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteByIdRequestBuilder {
        private final String id;

        private DeleteByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for deleteById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content, indicating successful deletion </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteByIdCall(id, _callback);
        }


        /**
         * Execute deleteById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content, indicating successful deletion </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteByIdWithHttpInfo(id);
        }

        /**
         * Execute deleteById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content, indicating successful deletion </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteByIdWithHttpInfo(id);
        }

        /**
         * Execute deleteById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content, indicating successful deletion </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteByIdAsync(id, _callback);
        }
    }

    /**
     * Deletes a specific connector by ID
     * 
     * @param id Unique ID of the connector (required)
     * @return DeleteByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content, indicating successful deletion </td><td>  -  </td></tr>
     </table>
     */
    public DeleteByIdRequestBuilder deleteById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new DeleteByIdRequestBuilder(id);
    }
    private okhttp3.Call discoverCatalogInfoCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/connectors/{id}/discover"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call discoverCatalogInfoValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling discoverCatalogInfo(Async)");
        }

        return discoverCatalogInfoCall(id, _callback);

    }


    private ApiResponse<ConnectorsDiscoverCatalogInfoResponse> discoverCatalogInfoWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = discoverCatalogInfoValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ConnectorsDiscoverCatalogInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call discoverCatalogInfoAsync(String id, final ApiCallback<ConnectorsDiscoverCatalogInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = discoverCatalogInfoValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ConnectorsDiscoverCatalogInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DiscoverCatalogInfoRequestBuilder {
        private final String id;

        private DiscoverCatalogInfoRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for discoverCatalogInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Catalog information for the connector </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return discoverCatalogInfoCall(id, _callback);
        }


        /**
         * Execute discoverCatalogInfo request
         * @return ConnectorsDiscoverCatalogInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Catalog information for the connector </td><td>  -  </td></tr>
         </table>
         */
        public ConnectorsDiscoverCatalogInfoResponse execute() throws ApiException {
            ApiResponse<ConnectorsDiscoverCatalogInfoResponse> localVarResp = discoverCatalogInfoWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute discoverCatalogInfo request with HTTP info returned
         * @return ApiResponse&lt;ConnectorsDiscoverCatalogInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Catalog information for the connector </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConnectorsDiscoverCatalogInfoResponse> executeWithHttpInfo() throws ApiException {
            return discoverCatalogInfoWithHttpInfo(id);
        }

        /**
         * Execute discoverCatalogInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Catalog information for the connector </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConnectorsDiscoverCatalogInfoResponse> _callback) throws ApiException {
            return discoverCatalogInfoAsync(id, _callback);
        }
    }

    /**
     * Discovers catalog information for a specified connector
     * 
     * @param id Unique ID of the connector (required)
     * @return DiscoverCatalogInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Catalog information for the connector </td><td>  -  </td></tr>
     </table>
     */
    public DiscoverCatalogInfoRequestBuilder discoverCatalogInfo(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new DiscoverCatalogInfoRequestBuilder(id);
    }
    private okhttp3.Call getByIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/connectors/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getById(Async)");
        }

        return getByIdCall(id, _callback);

    }


    private ApiResponse<ConnectorsGetByIdResponse> getByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ConnectorsGetByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String id, final ApiCallback<ConnectorsGetByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ConnectorsGetByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String id;

        private GetByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A single connector object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(id, _callback);
        }


        /**
         * Execute getById request
         * @return ConnectorsGetByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A single connector object </td><td>  -  </td></tr>
         </table>
         */
        public ConnectorsGetByIdResponse execute() throws ApiException {
            ApiResponse<ConnectorsGetByIdResponse> localVarResp = getByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;ConnectorsGetByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A single connector object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConnectorsGetByIdResponse> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(id);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A single connector object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConnectorsGetByIdResponse> _callback) throws ApiException {
            return getByIdAsync(id, _callback);
        }
    }

    /**
     * Retrieves a specific connector by ID
     * 
     * @param id Unique ID of the connector (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A single connector object </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetByIdRequestBuilder(id);
    }
    private okhttp3.Call listAllCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/connectors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listAllCall(_callback);

    }


    private ApiResponse<ConnectorsListAllResponse> listAllWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listAllValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ConnectorsListAllResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllAsync(final ApiCallback<ConnectorsListAllResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ConnectorsListAllResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllRequestBuilder {

        private ListAllRequestBuilder() {
        }

        /**
         * Build call for listAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of connectors </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllCall(_callback);
        }


        /**
         * Execute listAll request
         * @return ConnectorsListAllResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of connectors </td><td>  -  </td></tr>
         </table>
         */
        public ConnectorsListAllResponse execute() throws ApiException {
            ApiResponse<ConnectorsListAllResponse> localVarResp = listAllWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAll request with HTTP info returned
         * @return ApiResponse&lt;ConnectorsListAllResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of connectors </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConnectorsListAllResponse> executeWithHttpInfo() throws ApiException {
            return listAllWithHttpInfo();
        }

        /**
         * Execute listAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of connectors </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConnectorsListAllResponse> _callback) throws ApiException {
            return listAllAsync(_callback);
        }
    }

    /**
     * Lists all connectors
     * 
     * @return ListAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of connectors </td><td>  -  </td></tr>
     </table>
     */
    public ListAllRequestBuilder listAll() throws IllegalArgumentException {
        return new ListAllRequestBuilder();
    }
    private okhttp3.Call querySourceCall(Integer id, ConnectorsQuerySourceRequest connectorsQuerySourceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectorsQuerySourceRequest;

        // create path and map variables
        String localVarPath = "/api/v1/connectors/{id}/query_source"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call querySourceValidateBeforeCall(Integer id, ConnectorsQuerySourceRequest connectorsQuerySourceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling querySource(Async)");
        }

        // verify the required parameter 'connectorsQuerySourceRequest' is set
        if (connectorsQuerySourceRequest == null) {
            throw new ApiException("Missing the required parameter 'connectorsQuerySourceRequest' when calling querySource(Async)");
        }

        return querySourceCall(id, connectorsQuerySourceRequest, _callback);

    }


    private ApiResponse<List<Map<String, Object>>> querySourceWithHttpInfo(Integer id, ConnectorsQuerySourceRequest connectorsQuerySourceRequest) throws ApiException {
        okhttp3.Call localVarCall = querySourceValidateBeforeCall(id, connectorsQuerySourceRequest, null);
        Type localVarReturnType = new TypeToken<List<Map<String, Object>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call querySourceAsync(Integer id, ConnectorsQuerySourceRequest connectorsQuerySourceRequest, final ApiCallback<List<Map<String, Object>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = querySourceValidateBeforeCall(id, connectorsQuerySourceRequest, _callback);
        Type localVarReturnType = new TypeToken<List<Map<String, Object>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class QuerySourceRequestBuilder {
        private final Integer id;
        private String query;

        private QuerySourceRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Set query
         * @param query SQL query to be executed (optional)
         * @return QuerySourceRequestBuilder
         */
        public QuerySourceRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Build call for querySource
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An array of generic JSON objects representing the preview data. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ConnectorsQuerySourceRequest connectorsQuerySourceRequest = buildBodyParams();
            return querySourceCall(id, connectorsQuerySourceRequest, _callback);
        }

        private ConnectorsQuerySourceRequest buildBodyParams() {
            ConnectorsQuerySourceRequest connectorsQuerySourceRequest = new ConnectorsQuerySourceRequest();
            connectorsQuerySourceRequest.query(this.query);
            return connectorsQuerySourceRequest;
        }

        /**
         * Execute querySource request
         * @return List&lt;Map&lt;String, Object&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An array of generic JSON objects representing the preview data. </td><td>  -  </td></tr>
         </table>
         */
        public List<Map<String, Object>> execute() throws ApiException {
            ConnectorsQuerySourceRequest connectorsQuerySourceRequest = buildBodyParams();
            ApiResponse<List<Map<String, Object>>> localVarResp = querySourceWithHttpInfo(id, connectorsQuerySourceRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute querySource request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Map&lt;String, Object&gt;&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An array of generic JSON objects representing the preview data. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Map<String, Object>>> executeWithHttpInfo() throws ApiException {
            ConnectorsQuerySourceRequest connectorsQuerySourceRequest = buildBodyParams();
            return querySourceWithHttpInfo(id, connectorsQuerySourceRequest);
        }

        /**
         * Execute querySource request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An array of generic JSON objects representing the preview data. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Map<String, Object>>> _callback) throws ApiException {
            ConnectorsQuerySourceRequest connectorsQuerySourceRequest = buildBodyParams();
            return querySourceAsync(id, connectorsQuerySourceRequest, _callback);
        }
    }

    /**
     * Query your source data
     * 
     * @param id The ID of the connector to query (required)
     * @param connectorsQuerySourceRequest  (required)
     * @return QuerySourceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of generic JSON objects representing the preview data. </td><td>  -  </td></tr>
     </table>
     */
    public QuerySourceRequestBuilder querySource(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new QuerySourceRequestBuilder(id);
    }
    private okhttp3.Call updateByIdCall(String id, ConnectorsUpdateByIdRequest connectorsUpdateByIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectorsUpdateByIdRequest;

        // create path and map variables
        String localVarPath = "/api/v1/connectors/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByIdValidateBeforeCall(String id, ConnectorsUpdateByIdRequest connectorsUpdateByIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateById(Async)");
        }

        // verify the required parameter 'connectorsUpdateByIdRequest' is set
        if (connectorsUpdateByIdRequest == null) {
            throw new ApiException("Missing the required parameter 'connectorsUpdateByIdRequest' when calling updateById(Async)");
        }

        return updateByIdCall(id, connectorsUpdateByIdRequest, _callback);

    }


    private ApiResponse<ConnectorsUpdateByIdResponse> updateByIdWithHttpInfo(String id, ConnectorsUpdateByIdRequest connectorsUpdateByIdRequest) throws ApiException {
        okhttp3.Call localVarCall = updateByIdValidateBeforeCall(id, connectorsUpdateByIdRequest, null);
        Type localVarReturnType = new TypeToken<ConnectorsUpdateByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByIdAsync(String id, ConnectorsUpdateByIdRequest connectorsUpdateByIdRequest, final ApiCallback<ConnectorsUpdateByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByIdValidateBeforeCall(id, connectorsUpdateByIdRequest, _callback);
        Type localVarReturnType = new TypeToken<ConnectorsUpdateByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByIdRequestBuilder {
        private final String id;
        private ConnectorsUpdateByIdRequestConnector connector;

        private UpdateByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set connector
         * @param connector  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder connector(ConnectorsUpdateByIdRequestConnector connector) {
            this.connector = connector;
            return this;
        }
        
        /**
         * Build call for updateById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Connector updated successfully </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ConnectorsUpdateByIdRequest connectorsUpdateByIdRequest = buildBodyParams();
            return updateByIdCall(id, connectorsUpdateByIdRequest, _callback);
        }

        private ConnectorsUpdateByIdRequest buildBodyParams() {
            ConnectorsUpdateByIdRequest connectorsUpdateByIdRequest = new ConnectorsUpdateByIdRequest();
            connectorsUpdateByIdRequest.connector(this.connector);
            return connectorsUpdateByIdRequest;
        }

        /**
         * Execute updateById request
         * @return ConnectorsUpdateByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Connector updated successfully </td><td>  -  </td></tr>
         </table>
         */
        public ConnectorsUpdateByIdResponse execute() throws ApiException {
            ConnectorsUpdateByIdRequest connectorsUpdateByIdRequest = buildBodyParams();
            ApiResponse<ConnectorsUpdateByIdResponse> localVarResp = updateByIdWithHttpInfo(id, connectorsUpdateByIdRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateById request with HTTP info returned
         * @return ApiResponse&lt;ConnectorsUpdateByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Connector updated successfully </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConnectorsUpdateByIdResponse> executeWithHttpInfo() throws ApiException {
            ConnectorsUpdateByIdRequest connectorsUpdateByIdRequest = buildBodyParams();
            return updateByIdWithHttpInfo(id, connectorsUpdateByIdRequest);
        }

        /**
         * Execute updateById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Connector updated successfully </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConnectorsUpdateByIdResponse> _callback) throws ApiException {
            ConnectorsUpdateByIdRequest connectorsUpdateByIdRequest = buildBodyParams();
            return updateByIdAsync(id, connectorsUpdateByIdRequest, _callback);
        }
    }

    /**
     * Updates a specific connector by ID
     * 
     * @param id Unique ID of the connector (required)
     * @param connectorsUpdateByIdRequest  (required)
     * @return UpdateByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Connector updated successfully </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByIdRequestBuilder updateById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateByIdRequestBuilder(id);
    }
}
