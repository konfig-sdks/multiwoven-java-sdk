/*
 * MultiWoven API
 * Open-source Reverse ETL that makes data segmentation, sync and activation both easy and fully secure.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * SyncsUpdateSpecificSyncRequestSync
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class SyncsUpdateSpecificSyncRequestSync {
  public static final String SERIALIZED_NAME_SOURCE_ID = "source_id";
  @SerializedName(SERIALIZED_NAME_SOURCE_ID)
  private Integer sourceId;

  public static final String SERIALIZED_NAME_DESTINATION_ID = "destination_id";
  @SerializedName(SERIALIZED_NAME_DESTINATION_ID)
  private Integer destinationId;

  public static final String SERIALIZED_NAME_MODEL_ID = "model_id";
  @SerializedName(SERIALIZED_NAME_MODEL_ID)
  private Integer modelId;

  public static final String SERIALIZED_NAME_SCHEDULE_TYPE = "schedule_type";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_TYPE)
  private String scheduleType;

  public static final String SERIALIZED_NAME_CONFIGURATION = "configuration";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION)
  private Map<String, Object> _configuration = null;

  public static final String SERIALIZED_NAME_STREAM_NAME = "stream_name";
  @SerializedName(SERIALIZED_NAME_STREAM_NAME)
  private String streamName;

  public static final String SERIALIZED_NAME_SYNC_MODE = "sync_mode";
  @SerializedName(SERIALIZED_NAME_SYNC_MODE)
  private String syncMode;

  public static final String SERIALIZED_NAME_SYNC_INTERVAL = "sync_interval";
  @SerializedName(SERIALIZED_NAME_SYNC_INTERVAL)
  private Integer syncInterval;

  public static final String SERIALIZED_NAME_SYNC_INTERVAL_UNIT = "sync_interval_unit";
  @SerializedName(SERIALIZED_NAME_SYNC_INTERVAL_UNIT)
  private String syncIntervalUnit;

  public SyncsUpdateSpecificSyncRequestSync() {
  }

  public SyncsUpdateSpecificSyncRequestSync sourceId(Integer sourceId) {
    
    
    
    
    this.sourceId = sourceId;
    return this;
  }

   /**
   * Get sourceId
   * @return sourceId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getSourceId() {
    return sourceId;
  }


  public void setSourceId(Integer sourceId) {
    
    
    
    this.sourceId = sourceId;
  }


  public SyncsUpdateSpecificSyncRequestSync destinationId(Integer destinationId) {
    
    
    
    
    this.destinationId = destinationId;
    return this;
  }

   /**
   * Get destinationId
   * @return destinationId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getDestinationId() {
    return destinationId;
  }


  public void setDestinationId(Integer destinationId) {
    
    
    
    this.destinationId = destinationId;
  }


  public SyncsUpdateSpecificSyncRequestSync modelId(Integer modelId) {
    
    
    
    
    this.modelId = modelId;
    return this;
  }

   /**
   * Get modelId
   * @return modelId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getModelId() {
    return modelId;
  }


  public void setModelId(Integer modelId) {
    
    
    
    this.modelId = modelId;
  }


  public SyncsUpdateSpecificSyncRequestSync scheduleType(String scheduleType) {
    
    
    
    
    this.scheduleType = scheduleType;
    return this;
  }

   /**
   * Get scheduleType
   * @return scheduleType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getScheduleType() {
    return scheduleType;
  }


  public void setScheduleType(String scheduleType) {
    
    
    
    this.scheduleType = scheduleType;
  }


  public SyncsUpdateSpecificSyncRequestSync _configuration(Map<String, Object> _configuration) {
    
    
    
    
    this._configuration = _configuration;
    return this;
  }

  public SyncsUpdateSpecificSyncRequestSync putConfigurationItem(String key, Object _configurationItem) {
    if (this._configuration == null) {
      this._configuration = new HashMap<>();
    }
    this._configuration.put(key, _configurationItem);
    return this;
  }

   /**
   * Get _configuration
   * @return _configuration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, Object> getConfiguration() {
    return _configuration;
  }


  public void setConfiguration(Map<String, Object> _configuration) {
    
    
    
    this._configuration = _configuration;
  }


  public SyncsUpdateSpecificSyncRequestSync streamName(String streamName) {
    
    
    
    
    this.streamName = streamName;
    return this;
  }

   /**
   * Get streamName
   * @return streamName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getStreamName() {
    return streamName;
  }


  public void setStreamName(String streamName) {
    
    
    
    this.streamName = streamName;
  }


  public SyncsUpdateSpecificSyncRequestSync syncMode(String syncMode) {
    
    
    
    
    this.syncMode = syncMode;
    return this;
  }

   /**
   * Get syncMode
   * @return syncMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSyncMode() {
    return syncMode;
  }


  public void setSyncMode(String syncMode) {
    
    
    
    this.syncMode = syncMode;
  }


  public SyncsUpdateSpecificSyncRequestSync syncInterval(Integer syncInterval) {
    
    
    
    
    this.syncInterval = syncInterval;
    return this;
  }

   /**
   * Get syncInterval
   * @return syncInterval
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getSyncInterval() {
    return syncInterval;
  }


  public void setSyncInterval(Integer syncInterval) {
    
    
    
    this.syncInterval = syncInterval;
  }


  public SyncsUpdateSpecificSyncRequestSync syncIntervalUnit(String syncIntervalUnit) {
    
    
    
    
    this.syncIntervalUnit = syncIntervalUnit;
    return this;
  }

   /**
   * Get syncIntervalUnit
   * @return syncIntervalUnit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSyncIntervalUnit() {
    return syncIntervalUnit;
  }


  public void setSyncIntervalUnit(String syncIntervalUnit) {
    
    
    
    this.syncIntervalUnit = syncIntervalUnit;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SyncsUpdateSpecificSyncRequestSync instance itself
   */
  public SyncsUpdateSpecificSyncRequestSync putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SyncsUpdateSpecificSyncRequestSync syncsUpdateSpecificSyncRequestSync = (SyncsUpdateSpecificSyncRequestSync) o;
    return Objects.equals(this.sourceId, syncsUpdateSpecificSyncRequestSync.sourceId) &&
        Objects.equals(this.destinationId, syncsUpdateSpecificSyncRequestSync.destinationId) &&
        Objects.equals(this.modelId, syncsUpdateSpecificSyncRequestSync.modelId) &&
        Objects.equals(this.scheduleType, syncsUpdateSpecificSyncRequestSync.scheduleType) &&
        Objects.equals(this._configuration, syncsUpdateSpecificSyncRequestSync._configuration) &&
        Objects.equals(this.streamName, syncsUpdateSpecificSyncRequestSync.streamName) &&
        Objects.equals(this.syncMode, syncsUpdateSpecificSyncRequestSync.syncMode) &&
        Objects.equals(this.syncInterval, syncsUpdateSpecificSyncRequestSync.syncInterval) &&
        Objects.equals(this.syncIntervalUnit, syncsUpdateSpecificSyncRequestSync.syncIntervalUnit)&&
        Objects.equals(this.additionalProperties, syncsUpdateSpecificSyncRequestSync.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourceId, destinationId, modelId, scheduleType, _configuration, streamName, syncMode, syncInterval, syncIntervalUnit, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SyncsUpdateSpecificSyncRequestSync {\n");
    sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
    sb.append("    destinationId: ").append(toIndentedString(destinationId)).append("\n");
    sb.append("    modelId: ").append(toIndentedString(modelId)).append("\n");
    sb.append("    scheduleType: ").append(toIndentedString(scheduleType)).append("\n");
    sb.append("    _configuration: ").append(toIndentedString(_configuration)).append("\n");
    sb.append("    streamName: ").append(toIndentedString(streamName)).append("\n");
    sb.append("    syncMode: ").append(toIndentedString(syncMode)).append("\n");
    sb.append("    syncInterval: ").append(toIndentedString(syncInterval)).append("\n");
    sb.append("    syncIntervalUnit: ").append(toIndentedString(syncIntervalUnit)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("source_id");
    openapiFields.add("destination_id");
    openapiFields.add("model_id");
    openapiFields.add("schedule_type");
    openapiFields.add("configuration");
    openapiFields.add("stream_name");
    openapiFields.add("sync_mode");
    openapiFields.add("sync_interval");
    openapiFields.add("sync_interval_unit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SyncsUpdateSpecificSyncRequestSync
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SyncsUpdateSpecificSyncRequestSync.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SyncsUpdateSpecificSyncRequestSync is not found in the empty JSON string", SyncsUpdateSpecificSyncRequestSync.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("schedule_type") != null && !jsonObj.get("schedule_type").isJsonNull()) && !jsonObj.get("schedule_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schedule_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schedule_type").toString()));
      }
      if ((jsonObj.get("stream_name") != null && !jsonObj.get("stream_name").isJsonNull()) && !jsonObj.get("stream_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stream_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stream_name").toString()));
      }
      if ((jsonObj.get("sync_mode") != null && !jsonObj.get("sync_mode").isJsonNull()) && !jsonObj.get("sync_mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sync_mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sync_mode").toString()));
      }
      if ((jsonObj.get("sync_interval_unit") != null && !jsonObj.get("sync_interval_unit").isJsonNull()) && !jsonObj.get("sync_interval_unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sync_interval_unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sync_interval_unit").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SyncsUpdateSpecificSyncRequestSync.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SyncsUpdateSpecificSyncRequestSync' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SyncsUpdateSpecificSyncRequestSync> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SyncsUpdateSpecificSyncRequestSync.class));

       return (TypeAdapter<T>) new TypeAdapter<SyncsUpdateSpecificSyncRequestSync>() {
           @Override
           public void write(JsonWriter out, SyncsUpdateSpecificSyncRequestSync value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SyncsUpdateSpecificSyncRequestSync read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             SyncsUpdateSpecificSyncRequestSync instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SyncsUpdateSpecificSyncRequestSync given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SyncsUpdateSpecificSyncRequestSync
  * @throws IOException if the JSON string is invalid with respect to SyncsUpdateSpecificSyncRequestSync
  */
  public static SyncsUpdateSpecificSyncRequestSync fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SyncsUpdateSpecificSyncRequestSync.class);
  }

 /**
  * Convert an instance of SyncsUpdateSpecificSyncRequestSync to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

